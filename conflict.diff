diff --git a/.ipynb_checkpoints/Euler 7-checkpoint.ipynb b/.ipynb_checkpoints/Euler 7-checkpoint.ipynb
index 852c82f..43c3a2d 100644
--- a/.ipynb_checkpoints/Euler 7-checkpoint.ipynb	
+++ b/.ipynb_checkpoints/Euler 7-checkpoint.ipynb	
@@ -24,7 +24,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 2,
    "metadata": {
     "collapsed": false
    },
@@ -35,7 +35,7 @@
        "get_upper_bound (generic function with 1 method)"
       ]
      },
-     "execution_count": 1,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -60,7 +60,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 3,
    "metadata": {
     "collapsed": false
    },
@@ -71,7 +71,7 @@
        "114320"
       ]
      },
-     "execution_count": 2,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -96,17 +96,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 4,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
      "ename": "LoadError",
-     "evalue": "BoundsError()\nwhile loading In[3], in expression starting on line 2",
+     "evalue": "BoundsError()\nwhile loading In[4], in expression starting on line 2",
      "output_type": "error",
      "traceback": [
-      "BoundsError()\nwhile loading In[3], in expression starting on line 2",
+      "BoundsError()\nwhile loading In[4], in expression starting on line 2",
       "",
       " in getindex at ./bitarray.jl:350"
      ]
@@ -128,7 +128,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "metadata": {
     "collapsed": false
    },
@@ -137,7 +137,7 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "elapsed time: 0.014452114 seconds (430144 bytes allocated)\n"
+      "elapsed time: 0.013810925 seconds (416344 bytes allocated)\n"
      ]
     },
     {
@@ -146,7 +146,7 @@
        "104743"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -203,7 +203,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 9,
    "metadata": {
     "collapsed": false
    },
@@ -212,16 +212,16 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "elapsed time: 0.010705828 seconds (293692 bytes allocated)\n"
+      "elapsed time: 0.008629454 seconds (279132 bytes allocated)\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "104743"
+       "3"
       ]
      },
-     "execution_count": 5,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
diff --git a/.ipynb_checkpoints/integer factorization-checkpoint.ipynb b/.ipynb_checkpoints/integer factorization-checkpoint.ipynb
new file mode 100644
index 0000000..c4242ee
--- /dev/null
+++ b/.ipynb_checkpoints/integer factorization-checkpoint.ipynb	
@@ -0,0 +1,139 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "To have\n",
+    "\n",
+    "for i = obj\n",
+    "    use i\n",
+    "done\n",
+    "\n",
+    "working, we have to define start, next, done methods for typeofbj)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "ename": "LoadError",
+     "evalue": "type: non-boolean (UnionType) used in boolean context\nwhile loading In[1], in expression starting on line 2",
+     "output_type": "error",
+     "traceback": [
+      "type: non-boolean (UnionType) used in boolean context\nwhile loading In[1], in expression starting on line 2",
+      ""
+     ]
+    }
+   ],
+   "source": [
+    "typeof(falses(10))\n",
+    "if None\n",
+    "    print(\"2\")\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [],
+   "source": [
+    "immutable Sieve{N<:Integer}\n",
+    "    is_prime::BitArray\n",
+    "    ub::N\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "done (generic function with 37 methods)"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "sundaram_sieve(n::Integer) = Sieve(trues(n), div(n, 2))\n",
+    "\n",
+    "# the first state. In the state keep the last checked integer\n",
+    "Base.start(s::Sieve) = 1\n",
+    "\n",
+    "function Base.next(s::Sieve, state)\n",
+    "    \n",
+    "    for i = state:s.ub\n",
+    "        step = i * 2 + 1\n",
+    "        for j=i+i*step:step:s.ub\n",
+    "            s.is_prime[j] = false\n",
+    "        end\n",
+    "        if s.is_prime[i]\n",
+    "            return (max(2, (state-1)*2+1), i+1)\n",
+    "        end\n",
+    "    end\n",
+    "    (max(2, (state-1)*2+1), s.ub)\n",
+    "end\n",
+    "\n",
+    "Base.done(s::Sieve, state) = state == s.ub"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "2 3 5 7 11 13 17 "
+     ]
+    }
+   ],
+   "source": [
+    "for i = sundaram_sieve(20)\n",
+    "    print(\"$i \")\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "http://docs.julialang.org/en/release-0.4/manual/interfaces/"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Julia 0.3.11",
+   "language": "julia",
+   "name": "julia-0.3"
+  },
+  "language_info": {
+   "file_extension": ".jl",
+   "mimetype": "application/julia",
+   "name": "julia",
+   "version": "0.3.11"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 0
+}
diff --git a/Euler 7.ipynb b/Euler 7.ipynb
index 852c82f..43c3a2d 100644
--- a/Euler 7.ipynb	
+++ b/Euler 7.ipynb	
@@ -24,7 +24,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 2,
    "metadata": {
     "collapsed": false
    },
@@ -35,7 +35,7 @@
        "get_upper_bound (generic function with 1 method)"
       ]
      },
-     "execution_count": 1,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -60,7 +60,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 3,
    "metadata": {
     "collapsed": false
    },
@@ -71,7 +71,7 @@
        "114320"
       ]
      },
-     "execution_count": 2,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -96,17 +96,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 4,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
      "ename": "LoadError",
-     "evalue": "BoundsError()\nwhile loading In[3], in expression starting on line 2",
+     "evalue": "BoundsError()\nwhile loading In[4], in expression starting on line 2",
      "output_type": "error",
      "traceback": [
-      "BoundsError()\nwhile loading In[3], in expression starting on line 2",
+      "BoundsError()\nwhile loading In[4], in expression starting on line 2",
       "",
       " in getindex at ./bitarray.jl:350"
      ]
@@ -128,7 +128,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "metadata": {
     "collapsed": false
    },
@@ -137,7 +137,7 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "elapsed time: 0.014452114 seconds (430144 bytes allocated)\n"
+      "elapsed time: 0.013810925 seconds (416344 bytes allocated)\n"
      ]
     },
     {
@@ -146,7 +146,7 @@
        "104743"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -203,7 +203,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 9,
    "metadata": {
     "collapsed": false
    },
@@ -212,16 +212,16 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "elapsed time: 0.010705828 seconds (293692 bytes allocated)\n"
+      "elapsed time: 0.008629454 seconds (279132 bytes allocated)\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "104743"
+       "3"
       ]
      },
-     "execution_count": 5,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
diff --git a/integer factorization.ipynb b/integer factorization.ipynb
new file mode 100644
index 0000000..c4242ee
--- /dev/null
+++ b/integer factorization.ipynb	
@@ -0,0 +1,139 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "To have\n",
+    "\n",
+    "for i = obj\n",
+    "    use i\n",
+    "done\n",
+    "\n",
+    "working, we have to define start, next, done methods for typeofbj)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "ename": "LoadError",
+     "evalue": "type: non-boolean (UnionType) used in boolean context\nwhile loading In[1], in expression starting on line 2",
+     "output_type": "error",
+     "traceback": [
+      "type: non-boolean (UnionType) used in boolean context\nwhile loading In[1], in expression starting on line 2",
+      ""
+     ]
+    }
+   ],
+   "source": [
+    "typeof(falses(10))\n",
+    "if None\n",
+    "    print(\"2\")\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [],
+   "source": [
+    "immutable Sieve{N<:Integer}\n",
+    "    is_prime::BitArray\n",
+    "    ub::N\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "done (generic function with 37 methods)"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "sundaram_sieve(n::Integer) = Sieve(trues(n), div(n, 2))\n",
+    "\n",
+    "# the first state. In the state keep the last checked integer\n",
+    "Base.start(s::Sieve) = 1\n",
+    "\n",
+    "function Base.next(s::Sieve, state)\n",
+    "    \n",
+    "    for i = state:s.ub\n",
+    "        step = i * 2 + 1\n",
+    "        for j=i+i*step:step:s.ub\n",
+    "            s.is_prime[j] = false\n",
+    "        end\n",
+    "        if s.is_prime[i]\n",
+    "            return (max(2, (state-1)*2+1), i+1)\n",
+    "        end\n",
+    "    end\n",
+    "    (max(2, (state-1)*2+1), s.ub)\n",
+    "end\n",
+    "\n",
+    "Base.done(s::Sieve, state) = state == s.ub"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "2 3 5 7 11 13 17 "
+     ]
+    }
+   ],
+   "source": [
+    "for i = sundaram_sieve(20)\n",
+    "    print(\"$i \")\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "http://docs.julialang.org/en/release-0.4/manual/interfaces/"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Julia 0.3.11",
+   "language": "julia",
+   "name": "julia-0.3"
+  },
+  "language_info": {
+   "file_extension": ".jl",
+   "mimetype": "application/julia",
+   "name": "julia",
+   "version": "0.3.11"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 0
+}